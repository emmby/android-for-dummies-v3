<?xml version="1.0" encoding="utf-8"?>

<!-- The Card into which we'll place our task info.  The view will be
     the same width as our parent and a height of 100dp.  We'll add a
     margin on the bottom to create an empty space between items in the
     list, and we'll also add a 5dp gutter on the left and right.
     We're using an elevation of 2dp to add a subtle shadowing effect.
     We set the foreground drawable to android's selectableItemBackground
     so that we get a nice click animation when the user clicks on the
     card.  We also turn off the default rounded corners for the card -->
<android.support.v7.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:card_view="http://schemas.android.com/apk/res-auto"
    android:id="@+id/card_view"
    android:layout_width="match_parent"
    android:layout_height="100dp"
    android:layout_marginTop="@dimen/task_card_half_spacing"
    android:layout_marginBottom="@dimen/task_card_half_spacing"
    android:layout_marginLeft="@dimen/gutter"
    android:layout_marginRight="@dimen/gutter"
    android:layout_gravity="center"
    android:elevation="@dimen/task_card_elevation"
    android:foreground="?android:attr/selectableItemBackground"
    card_view:cardCornerRadius="0dp" >

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <!-- The image for the task.  It's a cropped square image that
             fills the height of the card.  It's aligned to the far
             left of the card (the far right in languages that read
             right-to-left like hebrew and arabic) -->
        <ImageView
            android:id="@+id/image"
            android:contentDescription="@string/task_image"
            android:layout_width="100dp"
            android:layout_height="100dp"
            android:scaleType="centerCrop"
            android:layout_alignParentStart="true"
            />

        <!-- The title of the task.  We'll make it a little larger
             (Medium) than normal text.  We also use the Inverse color
             since our theme (Theme.Material) uses light text on a dark
             background by default, which is what we want, but if we did
             that on the light colored Cards then you wouldn't be able
             to read the text.
             We set a maxlines of 1 to prevent wrapping of the title,
             and we'll ellipsize the end if it exceeds one line.
             We place the title to the right and aligned with
             the top of the task image.
             We give the title a little padding on all sides to make
             it look good within the card.
             -->
        <TextView
            style="@android:style/TextAppearance.Medium.Inverse"
            android:id="@+id/text1"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:maxLines="1"
            android:ellipsize="end"
            android:padding="10dp"
            android:layout_alignTop="@id/image"
            android:layout_toEndOf="@id/image" />

        <!-- The task notes. We limit the number of lines to two,
             and place it below the title and aligned on the left
             hand side with the title. -->
        <TextView
            style="@android:style/TextAppearance.Inverse"
            android:id="@+id/text2"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:maxLines="2"
            android:ellipsize="end"
            android:padding="10dp"
            android:layout_alignStart="@id/text1"
            android:layout_below="@id/text1" />

    </RelativeLayout>

</android.support.v7.widget.CardView>

