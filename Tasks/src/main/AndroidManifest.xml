<?xml version="1.0" encoding="utf-8"?>

<!-- The AndroidManifest.xml describes all the things that we're going
     to put into our app.  Here we set our app's package identifier
     to com.dummies.tasks -->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.dummies.tasks">

    <!-- For Android TV -->
    <uses-feature android:name="android.hardware.touchscreen"
                  android:required="false" />

    <!-- Declare the various permissions that our app needs to run.
         When users download our app from the Play store, the store
         will notify users of the permissions we request here. -->
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>

    <!-- Declare the application.  We'll allow backups since we have
         nothing sensitive to hide.  We'll also set our app's Theme
         to a custom theme we'll define in styles.xml.
         You can add a custom application icon if you like by setting
         android:icon and removing tools:ignore="MissingApplicationIcon".
         We'll set the app's label to "Tasks", which will be the default
         title for each of our activities if we don't set their labels
         to something else.
         -->
    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:theme="@style/AppTheme"
        android:icon="@drawable/ic_launcher" >

        <!-- required for android wearable syncing -->
        <meta-data
            android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version"/>

        <!-- The Task Edit Activity for phones.
             We set documentLaunchMode to always to make every task
             we edit show up as a separate entry in the phone's Recent
             Apps list.  If we didn't do this, Recent Apps would only
             show the most recent task that the user edited. -->
        <activity android:name=".activity.TaskEditActivity"
                  android:theme="@style/AppTheme.TransparentActionBar"
                  android:label=""
                  android:documentLaunchMode="always" />

        <!-- The Preferences activity for customizing apps settings -->
        <activity android:name=".activity.PreferencesActivity"/>


        <activity android:name=".tv.BrowseActivity"
                  android:theme="@style/Theme.Leanback"
                  android:screenOrientation="landscape" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name ="android.intent.category.LEANBACK_LAUNCHER" />
            </intent-filter>
        </activity>

        <service android:name=".service.AddTaskWearableListenerService">
            <intent-filter>
                <action android:name="com.google.android.gms.wearable.BIND_LISTENER" />
            </intent-filter>
        </service>


        <!-- Our OnAlarmReceiver, which is triggered whenever one of
             our reminder alarms fires.  We don't need other apps to be
             able to call it, so as a security measure let's set
             export to false. -->
        <receiver
            android:name=".receiver.OnAlarmReceiver"
            android:exported="false"/>

        <!-- Our OnBootReceiver, which is triggered whenever the phone
             boots up (android.intent.action.BOOT_COMPLETED). Again,
             no one else should be able to invoke our OnBootReceiver,
             so we'll set exported to false. -->
        <receiver
            android:name=".receiver.OnBootReceiver"
            android:exported="false">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED"/>
            </intent-filter>
        </receiver>

        <!-- Our contentprovider, which maintains a database of tasks.
             This content provider is the "authority" for content under
             the "com.dummies.tasks.provider.TaskProvider" name, which
             is how we'll look up this content later.
             We do not want other apps to be able to read our task data,
             so set exported to false.
             -->
        <provider
            android:name=".provider.TaskProvider"
            android:authorities="com.dummies.tasks.provider.TaskProvider"
            android:exported="false"/>

    </application>

</manifest>